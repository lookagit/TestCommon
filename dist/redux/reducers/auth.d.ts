import Immutable, { ImmutableObject } from 'seamless-immutable';
import { IAuthState, IAuthActionTypes, SetAuthParamType } from '../../models/reducers/auth';
import { IGetTokens } from '../../models/api';
declare const Creators: {
    loginRequest: (email: string, password: string) => SetAuthParamType;
    loginSuccess: (data: IGetTokens) => SetAuthParamType;
    loginFailure: (error: object) => SetAuthParamType;
    loginFailureField: (message: string, field: string) => SetAuthParamType;
    logoutRequest: () => SetAuthParamType;
    logoutSuccess: () => SetAuthParamType;
    loginLoad: () => SetAuthParamType;
    loginLoadSuccess: () => SetAuthParamType;
    refreshRequest: (authRefresh: string) => SetAuthParamType;
    refreshSuccess: (authToken: string) => SetAuthParamType;
    refreshFailure: (error: object) => SetAuthParamType;
    initStorageRequest: (id_token: string, refresh_token: string, access_token: string, expires_in: number) => SetAuthParamType;
    initStorage: (id_token: string, refresh_token: string, access_token: string, expires_in: number) => SetAuthParamType;
    initStorageFailure: (error: object) => SetAuthParamType;
};
export declare const LoginTypes: IAuthActionTypes;
export default Creators;
export declare const INITIAL_STATE: ImmutableObject<IAuthState>;
export declare const request: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const success: (state: ImmutableObject<IAuthState>, data: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const failure: (state: ImmutableObject<IAuthState>, { error }: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const loginFailureField: (state: ImmutableObject<IAuthState>, { message, field }: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const load: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const loadSuccess: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const refresh: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const refreshSuccess: (state: ImmutableObject<IAuthState>, { authToken }: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const refreshFailure: (state: ImmutableObject<IAuthState>, { error }: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const initStorage: (state: ImmutableObject<IAuthState>, data: SetAuthParamType) => Immutable.ImmutableObject<IAuthState>;
export declare const initStorageRequest: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const initStorageFailure: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const logoutRequest: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const logoutSuccess: (state: ImmutableObject<IAuthState>) => Immutable.ImmutableObject<IAuthState>;
export declare const reducer: import("redux").Reducer<Immutable.ImmutableObject<IAuthState>, SetAuthParamType>;
